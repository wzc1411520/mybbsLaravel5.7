<style lang="less">
page{
    background-color: #FFFFFF;
    width:100%;
}
.avatar-wrap {
  margin: 5px 10px;

}
.avatar {
  width: 60px;
  height: 60px;
  display: block;
  border-radius: 50%;
}
.topic-title {
  padding: 15px;
}
.show-cell{
  display: flex;
  // justify-content: center; /* 水平居中 */
  align-items: flex-start;     /* 垂直居中 */
  flex-direction: row;
  // border: 1px solid red;
  border-bottom: 1px solid #efefef;
  border-top: 1px solid #efefef;
}
.show-cell__bd{
  width:calc(100% - 100px);
}
.show-cell{
  width: 100%;
}
.user_desc{
  font-size: 12px;
  color:#c4c4c4
}
.topic-info{
   display: flex;
  // justify-content: center; /* 水平居中 */
  align-items: center;     /* 垂直居中 */
  flex-direction: row;
  font-size: 12px;
  color:#c4c4c4
}
.page__title{
  font-size: 18px;
  font-weight: 600;
  margin-bottom: 5px
}
.weui-article{
  padding:0px 15px 0;
  min-height: 180px;
  position: relative;
}
.deleteBtn{
  display: flex;
  flex-direction: row;
  position: absolute;
  bottom: 10px;
  right: 10px;
}
image{
  width: 100%;
  height: 100%;
}
.create-reply {
  width: 40px;
  height: 40px;
  position: fixed;
  bottom: 30px;
  right: 30px;
}
.weui-media-box__info__meta{
  display: flex;
}
.zanBtn{

}
.user_name{
  font-size: 18px;
  font-weight: 500;
}
</style>
<template>

  <view class="page">
    <van-notify id="van-notify" />
    <view class="page__bd">
      <view class="show-user">
        <navigator class="show-cell" url='/pages/users/show?id={{ topic.user.id }}'>
          <view class="avatar-wrap">
            <image class="avatar" src="{{ topic.user.avatar }}"/>
          </view>
          <view class="show-cell__bd">
            <view class="user_name">{{ topic.user.name }}</view>
            <view class='user_desc'>{{ topic.user.introduction }}</view>
          </view>
        </navigator>
      </view>
      <view class="topic-title">
        <view class="page__title">{{ topic.title }}</view>
        <view class="topic-info">
          <view class="weui-media-box__info__meta">{{ topic.category.name }} • </view>
          <view class="weui-media-box__info__meta">{{ topic.updated_at }} • </view>
          <view class="weui-media-box__info__meta">
            <van-icon name="chat-o" size='15px'/>
            {{ topic.reply_count }} •
          </view>
          <view class="weui-media-box__info__meta"><van-icon name="eye-o" size='15px'/>{{ topic.view_count }} • </view>
          <view class="weui-media-box__info__meta"><van-icon name="thumb-circle-o" size='15px'/>{{ topic.favoritesCount }}</view>
        </view>
      </view>
      <view class="weui-article">
        <rich-text nodes="{{ topic.body }}" style="font-size:16px;" bindtap="tap"></rich-text>
        <view  class="deleteBtn">
          <van-button wx:if="{{ canDelete }}" @tap="deleteTopic" size="mini"  type="default">删除</van-button>
          <van-button wx:if="{{ !isFavorited }}" class="zanBtn"  @tap="zanBtn" size="mini"  type="default">点赞</van-button>
          <van-button wx:else class="zanBtn"  @tap="zanBtn" size="mini"  type="default">已赞</van-button>
        </view>
      </view>
    </view>
    <view class="replyList">
      <replylist :syncUrl.sync='requestUrl'></replylist>
    </view>
    <!-- 回复按钮 -->
      <navigator url="/pages/replies/create?topic_id={{ topic.id }}">
        <image src="/images/reply.png" class="create-reply" />
      </navigator>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import api from '@/utils/api'
  // import util from '@/utils/util'
  import Notify from '../../components/vant/notify/notify';
  import ReplyList from '../../components/replies/reply'
  import Event from '@/utils/event.js'

  export default class TopicShow extends wepy.page {
    config = {
      navigationBarTitleText: '话题详情',
      enablePullDownRefresh: true,
      onReachBottomDistance:300
    }
    data = {
      id:null,
      // 话题数据
      topic: null,
      // 当前登录用户
      user: null,
      requestUrl:'',
      isFavorited:false
    }
    async onLoad(options) {
      this.id = options.id
      // 获取当前登录用户
      this.user = await this.$parent.getCurrentUser()
      this.requestUrl = 'topics/'+options.id+'/replies'
      await this.getTopic(options.id,this.user.id)
       this.isFavorited = this.topic.isFavorited
      this.$apply()
      // 调用组件 reload 方法
      this.$invoke('replylist', 'reload')
    }
    onShow(){
      let that = this
      Event.EventBus.on('first-event', function(msg) {
        console.log(`更新评论`);
        that.$invoke('replylist', 'reload')
      });
    }
    // 计算的属性
    computed = {
      // 是否可以删除话题
      canDelete() {
        if (!this.topic || !this.user) {
          return false
        }
        // 当前用户是话题的发布者
        return this.user.id === this.topic.user.id
      },
    }
    components = {
      replylist: ReplyList
    }
    methods = {
      async deleteTopic() {
        // 删除确认
        let res = await wepy.showModal({
          title: '确认删除',
          content: '您确认删除该话题吗',
          confirmText: '删除',
          cancelText: '取消'
        })

        // 用户点击取消后返回
        if (!res.confirm) {
          return
        }

        // 调用接口删除话题
        let deleteResponse = await api.authRequest({
          url: 'topics/' + this.topic.id,
          method: 'DELETE'
        })

        // 删除成功，给出提示
        if (deleteResponse.statusCode === 204) {
          Notify({
            text: '操作成功',
            backgroundColor: '#1989fa',
            duration:1000
          });
          // wepy.showToast({
          //   title: '删除成功',
          //   icon: 'success'
          // })

           // 设置全局变量，控制列表刷新
          let pages = this.getCurrentPages()
          console.log(pages)
          // 如果有上一页
          if (pages.length > 1) {
            // 检查所有已经打开的页面，如果是话题列表页面就记录下来
            let refreshPages = []
            pages.forEach((page) => {
              // 已打开的页面中包换 话题列表 或 用户的话题列表
              if (page.route === 'pages/index' || page.route === 'pages/topics/userIndex') {
                refreshPages.push(page.route)
              }
            })
            this.$parent.globalData.refreshPages = this.$parent.globalData.refreshPages.concat(refreshPages)
            this.$apply()
            console.log(this.$parent.globalData.refreshPages)
          }

          // 2 秒后返回上一页
          setTimeout(function() {
            wepy.navigateBack()
          }, 2000)
        }
      },
      async zanBtn(){
        // 调用接口删除话题
        let deleteResponse = await api.authRequest({
          url: 'topic/'+this.topic.id+'/favorite',
          method: 'GET'
        })
         if (deleteResponse.statusCode === 201) {
          Notify({
            text: '已赞',
            backgroundColor: '#1989fa',
            duration:1000
          });
          this.isFavorited = true
          await this. getTopic(this.id,this.user.id)
          this.$apply()
        }
      },
      // 获取话题数据
    }
    async getTopic(id,userId) {
      try {
        let topicResponse = await api.request({
          url: 'topics/' + id,
          data: {
            include: 'user,category,isFavorited',
            userId:userId
          }
        })
        let topic = topicResponse.data

        // 格式化 updated_at
        // topic.updated_at_diff = util.diffForHumans(topic.updated_at)

        this.topic = topic
        this.$apply()
      } catch (err) {
        console.log(err)
        Notify('服务器错误，请联系管理员');
      }
    }


    async onPullDownRefresh() {
      let reply_count = this.topic.reply_count
      let replyLength = this.topic.reply.length
      this.noMoreData = (reply_count<=replyLength)?true:false
      this.$apply()
      // this.page = 1
      await this. getTopic(this.id,this.user.id)
      this.$invoke('replylist', 'reload')
      wepy.stopPullDownRefresh()
    }
    async onReachBottom () {
      this.$invoke('replylist', 'loadMore')
    }

  }
</script>
