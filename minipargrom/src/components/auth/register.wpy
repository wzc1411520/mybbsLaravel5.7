<style lang="less">
.register-page{
  width: 300px;
  height: 400px;
}
.register-wrap {
  margin:10% auto;
  width: 90%;
  height: 79%;
}
.register-cell_warn{
  font-size: 12px;
  color: red
}
.register-cells__title{
  height:40px;
  line-height:40px;
  text-align:center;
}
.register-cells{
  margin:10% 0 10%;
}
.register-wrap {
  margin-top: 30px;
}
.error-message {
  color: #E64340;
}
.van-icon--image {
  width:7em !important;
  height:2.5em !important;
}
.van-field__icon-container{
  margin: 0 !important;
}


</style>
<template>
  <view class="register-page">
    <van-notify id="van-notify" />
    <van-icon name="arrow-left" size="20px" custom-style="font-size:20px;position:fixed;top:13px;left:10px;border-radius:50%;" @tap="login" />
    <view class="register-wrap">
      <view class="register-cells__title">手机注册</view>
      <!-- <view class="register-toptips register-toptips_warn" wx:if="{{ errorMessage }}">{{ errorMessage }}</view> -->
      <view class="login-cells login-cells_after-title">
          <van-cell-group>
          <van-field
            value="{{ phone }}"
            type='number'
            required
            clearable
            placeholder="请输入手机号"
            bind:change="bindPhoneInput"
            error="{{errors.phone}}"
            left-icon='contact'
            disabled="{{ phoneDisabled }}"
            use-button-slot
          >
            <van-button slot="button" size="small" type="primary" @tap="tapCaptchaCode">获取验证码</van-button>
          </van-field>
           <van-field
            value="{{ password }}"
            type="password"
            required
            placeholder="请输入密码"
            border="{{ false }}"
            bind:change="bindPasswordInput"
            error="{{error}}"
            left-icon='closed-eye'
          />

          <van-field
            value="{{ captchaValue }}"
            center
            clearable
            bind:change="bindCaptchaCodeInput"
            placeholder="请输入图片验证码"
             error="{{errors.captchaValue}}"
            icon="{{ captcha.imageContent }}"
            bind:click-icon="tapCaptchaCode"
            icon-class='.register-image'
          />

          <van-field
            value="{{ verificationCodeValue }}"
            center
            clearable
            bind:change="bindVerificationCodeValue"
            placeholder="请输入短信验证码"
             error="{{errors.verification_code}}"
            use-button-slot
          >
            <van-button slot="button" size="small"  loading="{{loading}}" disabled="{{disabled}}" type="primary" @click="sendCode">{{btn_message}}</van-button>
          </van-field>

        </van-cell-group>
      </view>
      <view class="register-btn-area">
        <button class="register-btn" type="primary" @tap="submit" open-type="getUserInfo">注册</button>
      </view>
    </view>
  </view>
    <!-- icon="{{ captcha.imageContent }}" -->
            <!-- bind:click-icon="tapCaptchaCode" -->
            <!-- icon-class='register-image' -->
    <!-- <view class="page__bd register-wrap">
       <view class="register-cell__ft">
              <icon wx:if="{{ errors.phone }}" type="warn" size="23" color="#E64340"></icon>
              <view class="register-vcode-btn" @tap="tapCaptchaCode">获取验证码</view>
            </view> -->

      <!-- 验证码输入模态框 -->
        <!-- <view class="modal" hidden="{{ captchaModalHidden }}" no-cancel bindconfirm="sendVerificationCode">
        <view wx:if="{{ errors.captchaValue }}" class="register-cells__tips error-message">{{ errors.captchaValue[0] }}</view>
        <view class="register-cell register-cell_input register-cell_vcode">
          <view class="register-cell__bd">
            <input class="register-input" placeholder="图片验证码" @input="bindCaptchaCodeInput"/>
          </view>
          <view class="register-cell__ft">
            <image class="register-vcode-img" @tap="tapCaptchaCode" src="{{ captcha.imageContent }}" style="width: 100px"></image>
          </view>
        </view> -->


</template>

<script>
  import wepy from 'wepy'
  import api from '@/utils/api'
  import Notify from '../vant/notify/notify';

  export default class register extends wepy.component {
    data = {
      // 手机号
      phone: null,
       // 密码
      password: '',
      // 手机号 input 是否 disabled
      phoneDisabled: false,
      // 图片验证码 modal 是否显示
      captchaModalHidden: true,
      // 用户输入的验证码
      captchaValue: null,
      // 图片验证码 key 及过期时间
      captcha: {},
      // 表单错误
      errors: {},
      // 短信验证码 key 及过期时间
      verificationCode: {},
      // 用户输入的验证码
      verificationCodeValue:null,

      userInfo:null,
      disabled:false,
      loading:false,
      btn_message:'发送验证码'

    }
    // 重置注册流程，初始化 data 数据
    resetRegister() {
      this.captchaModalHidden = true
      this.phoneDisabled = false
      this.captcha = {}
      this.verificationCode = {}
      this.errors = {}
      this.userInfo=null,
      this.disabled=false,
      this.loading=false,
      this.btn_message='发送验证码'
    }

    // 获取图片验证码
    async getCaptchaCode() {
       this.errors.phone = null
      // 判断手机号是否正确
      if (!(/^1[34578]\d{9}$/.test(this.phone))) {
        // this.errors.phone = '请输入正确的手机号'
        Notify('请输入正确的手机号');
        this.$apply()
        return false
      }
      try {
        // 调用发送验证码接口，参数为手机号
        let captchaResponse = await api.request({
          url: 'captchas',
          method: 'POST',
          data: {
            phone: this.phone
          }
        })


        // 表单错误
        if (captchaResponse.statusCode === 422) {
          Notify(captchaResponse.data.errors);
          // this.errors = captchaResponse.data.errors
          this.$apply()
        }
        console.log(captchaResponse)
        // 记录 key 和过期时间，打开 modal
        if (captchaResponse.statusCode === 200) {
          this.captcha = {
            key: captchaResponse.data.captcha_key,
            imageContent: captchaResponse.data.captcha_image_content,
            expiredAt: Date.parse(captchaResponse.data.expired_at)
          }

          // 关闭modal
          this.captchaModalHidden = false
          this.$apply()
        }
      } catch (err) {
        console.log(err)
        Notify('服务器错误，请联系管理员');
        // wepy.showModal({
        //   title: '提示',
        //   content: '服务器错误，请联系管理员'
        // })
      }
    }
    // 发送短信验证码
    async sendVerificationCode() {

      this.phoneDisabled = true
      this.errors.captchaValue = null
      if (!this.captchaValue) {
        // this.errors.captchaValue = '请输入图片验证码'
        Notify('请输入图片验证码');
        return false
      }

      // 检查验证码是否过期，重置流程
      if (new Date().getTime() > this.captcha.expiredAt) {
        Notify('验证码已过期');
        // wepy.showToast({
        //   title: '验证码已过期',
        //   icon: 'none',
        //   duration: 2000
        // })
        this.resetRegister()
        return false
      }

      try {
        let codeResponse = await api.request({
          url: 'verificationCodes',
          method: 'POST',
          data: {
            captcha_key: this.captcha.key,
            captcha_code: this.captchaValue
          }
        })

        // 验证码错误提示
        if (codeResponse.statusCode === 401) {
          // this.errors.captchaValue = ['图片验证码错误']
           Notify('图片验证码错误');
          this.$apply()
          await this.getCaptchaCode()
          return false
        }

        // 记录 key 和 过期时间
        if (codeResponse.statusCode === 200) {
          this.verificationCode = {
            key: codeResponse.data.key,
            expiredAt: Date.parse(codeResponse.data.expired_at)
          }

          // 关闭modal
          this.captchaModalHidden = true
          // 手机输入框 disabled
          this.phoneDisabled = true
          this.disabled=true
          this.$apply()
          const that = this
          let num = 60;
          this.timer = setInterval(function() {
            if(num<0){
              clearInterval(that.timer)
              that.disabled=false
               that.$apply()
            }

            that.btn_message= num+'s'
            that.$apply()
            console.log(that.btn_message)
            console.log(that.disabled)
            num--;
          }, 1000)
          // 清空报错信息
          this.errors = {}
          this.$apply()
        }
      } catch (err) {
        console.log(err)
        Notify('服务器错误，请联系管理员');
        // wepy.showModal({
        //   title: '提示',
        //   content: '服务器错误，请联系管理员'
        // })
      }
    }

    async submit (e) {
      this.errors = {}
      // 检查验证码是否已发送
      if (!this.verificationCode.key) {
        Notify('请发送验证码');
        // wepy.showToast({
        //   title: '请发送验证码',
        //   icon: 'none',
        //   duration: 2000
        // })
        return false
      }
      // 检查验证码是否过期
      if (new Date().getTime() > this.verificationCode.expiredAt) {
         Notify('验证码已过期');
        // wepy.showToast({
        //   title: '验证码已过期',
        //   icon: 'none',
        //   duration: 2000
        // })
        this.resetRegister()
        return false
      }

      try {
        let loginData = await wepy.login()

        let userInfo = await wepy.getUserInfo()
        // let wechatuserInfo = await wepy.getUserInfo()

        let registerResponse = await api.request({
          url: 'weapp/users',
          method: 'POST',
          data: {
            "verification_key" : this.verificationCode.key,
            "code" : loginData.code,
            'verification_code':this.verificationCodeValue,
            'password':this.password,
            'wechatuserInfo': userInfo
          }
        })

        // 验证码错误
        if (registerResponse.statusCode === 401) {
          Notify('验证码错误');
          // this.errors.verification_code = '验证码错误'
          this.$apply()
        }

        // 表单错误
        if (registerResponse.statusCode === 422) {
          Notify(registerResponse.data.errors);
          // this.errors = registerResponse.data.errors
          this.$apply()
        }

        // 注册成功，记录token
        if (registerResponse.statusCode === 200) {
          wepy.setStorageSync('access_token', registerResponse.data.access_token)
          wepy.setStorageSync('access_token_expired_at', new Date().getTime() + registerResponse.data.expires_in * 1000)
          // 设置用户信息
          wepy.setStorageSync('user', registerResponse.data.userInfo)

          Notify({
            text: '注册成功',
            backgroundColor: '#1989fa'
          });
          // wepy.showToast({
          //   title: '注册成功',
          //   icon: 'success'
          // })

          this.$emit('login-success',{'userInfo':registerResponse.data.userInfo})

          // 跳转到我的页面
          // setTimeout(function() {
          //   wepy.switchTab({
          //     url: '/pages/user'
          //   })
          // }, 2000)
        }
      } catch (err) {
        console.log(err)
        Notify('服务器错误，请联系管理员');
        // wepy.showModal({
        //   title: '提示',
        //   content: '服务器错误，请联系管理员'
        // })
      }
    }
    methods = {
      setDisabled: function (e) {
        this.disabled=!this.disabled
      },
      setLoading: function (e) {
        this.loading=!this.loading
      },
      login (){
        this.$emit('is_register',false)
      },
      bindVerificationCodeValue(e){
        this.verificationCodeValue =  e.detail
      },
       // 绑定密码 input 变化
      bindPasswordInput (e) {
        this.password = e.detail
      },
      // 绑定手机输入
      bindPhoneInput (e) {
        this.phone = e.detail
        this.errors.phone = null
      // 判断手机号是否正确
      if (!(/^1[34578]\d{9}$/.test(this.phone))) {
        Notify('请输入正确的手机号');
        // this.errors.phone = '请输入正确的手机号'
        this.$apply()
        console.log(this.errors.phone)
        return false
      }
      },
      // 绑定验证码输入
      bindCaptchaCodeInput (e) {
        this.captchaValue = e.detail
      },
      // 响应获取图片验证码按钮点击事件
      async tapCaptchaCode() {
        this.getCaptchaCode()
      },
      async sendCode(){
        this.sendVerificationCode()
      },
      async submit(){
        await this.submit()
      }
    }
  }
</script>
