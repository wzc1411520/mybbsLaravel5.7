<style lang="less">
.weui-loadmore_line {
  border-top:1px solid #E5E5E5;
  margin-top:2.4em;
}
.weui-loadmore {
  width:65%;
  margin:1.5em auto;
  line-height:1.6em;
  font-size:14px;
  text-align:center;
}
.weui-loadmore__tips_in-line {
  position:relative;
  top:-0.9em;
  padding:0 0.55em;
  background-color:#FFFFFF;
  color:#999999;
}
.weui-loadmore__tips {
  display:inline-block;
  vertical-align:middle;
}
.user_avatar{
  width:50px;
  height:50px;
  margin:5px;
  border:1px solid #f1f1f1;
  padding:5px;
  border-radius:5px;
}
.panel__hd{
  font-size:14px;
  border-top:1px solid #f1f1f1;
  border-bottom:1px solid #f1f1f1;
  padding:8px 0 8px 5px;

}
.reply-box{
   display: flex;
  // justify-content: center; /* 水平居中 */
  align-items: center;     /* 垂直居中 */
  flex-direction: row;
  border-bottom:1px solid #f1f1f1;
  margin:5px 0;

}
.reply_box__bd{
  width: calc(100% - 80px);
  position: relative;
}
.weui-media-box__desc{
  word-wrap:break-word
}
.weui-media-box__title{

}
.weui-media-box__desc{
  font-size: 14px;
  color: rgb(166, 166, 166);
  margin-bottom:18px;
}
.info__meta{
  font-size: 12px;
  color: rgb(184, 184, 184);
  position: absolute;
  bottom: 0px;
  left: 0px;
  z-index: 999;
}
.reply-delete {
  width:15px;
  height:15px;
  margin-right:5px;
}
</style>

<template>
  <view>
    <view class="panel__hd">回复 ({{reply_count}})</view>
    <repeat for="{{repliesData}}" key="id" index="index" item="reply">
      <view class="reply-box" hover-class="weui-cell_active">
        <navigator class="user_avatar" url="/pages/users/show?id={{ reply.user.id }}">
          <image class="replyer-avatar" src="{{ reply.user.avatar }}" />
        </navigator>
        <view class="reply_box__bd">
          <view class="weui-media-box__title">{{ reply.user.name }}</view>
          <view class="weui-media-box__desc"><rich-text nodes="{{ reply.content }}"></rich-text></view>
          <view class="weui-media-box__info">
            <view class="info__meta">{{ reply.created_at }}</view>
          </view>
        </view>
        <view>
           <image wx:if="{{ reply.can_delete }}" class="reply-delete" src="/images/trash.png" @tap="deleteReply({{ reply.topic }}, {{ reply.id }})"/>
        </view>
      </view>
    </repeat>
    <view class="weui-loadmore weui-loadmore_line" wx:if="{{ noMoreData }}">
      <view class="weui-loadmore__tips weui-loadmore__tips_in-line">暂无评论</view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  // import util from '@/utils/util'
  import api from '@/utils/api'
  import Notify from '../vant/notify/notify'

  export default class Reply extends wepy.component {
    data = {
      // 话题数据
      repliesData: null,
      // 有没有更多数据
      noMoreData: false,
      // 是否在加载中
      isLoading: false,
      syncData:{},
      reply_count:0
    }
    props = {
      // 父页面传入，请求参数
      // syncreplyData: {
      //   type: Object,
      //   default: {}
      // },
      // 父页面传入，请求url
      syncUrl: {
        type: String,
        default: 'topics'
      },
    }
    async getReplies(reset=false){
      if (!this.syncData.page) {
        this.syncData.page = 1
      }

      this.syncData.include = 'user'
      try {
        // 请求接口，传入参数
        let replicsResponse = await api.request({
          url: this.syncUrl,
          data: this.syncData
        })
        if (replicsResponse.statusCode === 200) {
          let replics = replicsResponse.data.data

          // 获取当前用户
          let user = wepy.getStorageSync('user')
          replics.forEach((reply) => {
            // 控制是否可以删除
            reply.can_delete = this.canDelete(user, reply)
            // reply.created_at_diff = util.diffForHumans(reply.created_at)
          })
          // 如果传入参数 reset 为true，则覆盖 topics
          this.repliesData = reset? replics:this.repliesData.concat(replics)

          let pagination = replicsResponse.data.meta

          // 根据分页设置是否还有更多数据
          if (pagination.current_page === pagination.last_page) {
            this.noMoreData = true
          }
          this.reply_count = pagination.total
          this.$apply()
          console.log(this.repliesData)
        }

        return replicsResponse
      } catch (err) {
        console.log(err)
        Notify('服务器错误，请联系管理员');
      }
    }
    canDelete(user, reply) {
      if (!user) {
        return false
      }
      return (reply.user.id === user.id)
    }
    methods = {
    // 删除回复
    async deleteReply(topicId, replyId) {
      // 确认是否删除
      let res = await wepy.showModal({
        title: '确认删除',
        content: '您确认删除该回复吗',
        confirmText: '删除',
        cancelText: '取消'
      })

      // 点击取消后返回
      if (!res.confirm) {
        return
      }
      try {
        // 调用接口删除回复
        let deleteResponse = await api.authRequest({
          url: 'topics/' + topicId + '/replies/' + replyId,
          method: 'DELETE'
        })

        // 删除成功
        if (deleteResponse.statusCode === 204) {
          Notify({
            text: '删除成功',
            backgroundColor: '#1989fa',
            duration:1000
          });
          // 将删除了的回复移除
          this.repliesData = this.repliesData.filter((reply) => reply.id !== replyId)
          this.reply_count = this.reply_count-1
          this.$apply()
        }

        return deleteResponse
      } catch (err) {
        console.log(err)
         Notify('服务器错误，请联系管理员');
      }
    }
  }
    // 加载更多
    async loadMore () {
      // 如果没有更多数据，或者正在加载，直接返回
      if (this.noMoreData || this.isLoading) {
        return
      }
      // 开始请求之前设置 isLoading 为true
      this.isLoading = true
      this.syncData.page = this.syncData.page + 1
      //await this.getReplies()
      await this.getReplies()
      // 开始结束后设置 isLoading 为 false
      this.isLoading = false
      this.$apply()
    }

    // 重新加载
    async reload() {
      this.syncData.page = 0
      this.noMoreData = false
      // this.reply_count = this.syncreplyData.reply_count
      // this.replies = this.syncreplyData.reply
      await this.getReplies(true)
      // if(_.toLength(this.replies)>=this.reply_count){
      //   let reply_count=this.syncreplyData.reply_count
      //   let replyLength=this.replies.length
      // this.noMoreData = (reply_count<=replyLength)?true:false

      // this.$apply()
      // return await this.getReplies(true)
    }
  }
</script>
